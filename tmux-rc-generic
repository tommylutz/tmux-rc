#!/bin/bash

######## tmux-rc-generic ##########
# This script is designed to help you set up servers running inside a shared
# tmux session, started up by the init.d system. The canonical example usage
# of this script is to manage a minecraft server.
#
# To use this script, call it from your init.d script. Export the following
# variables:
#
# Variable      Meaning
# SVC_DIR       A path that we should cd to before bringing up the server
# SVC_UP_CMD    The command used to bring up the server
# SVC_NAME      A unique string that can be used to pgrep -f the process of the server.
#               This is used to detect whether the server is up or down.
# SVC_USER      The user the server should run as
# SVC_TMUX      The name of the tmux socket in /tmp/
# SVC_STOP_CMD  Characters to send to the tmux terminal to stop the server.
#               For minecraft, this will be "save-all^Mstop"
# SVC_GROUP     Optional unix group that will have access to directly manipulate
#               the tmux session of the server using 
#               $ tmux -S /tmp/$SVC_TMUX attach
#
# After exporting the above variables, the client script should invoke this script
# as follows:
# /usr/sbin/tmux-rc-generic "$@"

die()
{
    echo "$@"
    exit 1
}

validate_env_vars()
{
    if [[ ! -d "$SVC_DIR" ]]; then
        die "Must set SVC_DIR to a valid directory"
    fi
    
    if [[ -z "$SVC_UP_CMD" ]]; then
        die "Must set SVC_UP_CMD to a valid command"
    fi

    if [[ -z "$SVC_NAME" ]]; then
        die "Must set SVC_NAME to a unique string for the process"
    fi

    if [[ -z "$SVC_USER" ]]; then
        die "Must set SVC_USER to a unix user"
    fi

    if [[ -z "$SVC_TMUX" ]]; then
        die "Must set SVC_TMUX to the desired socket name in /tmp"
    fi
    
    if [[ -z "$SVC_STOP_CMD" ]]; then
        die "Must set SVC_STOP_CMD to the key sequence needed to kill the server"
    fi
}

######################################################
ME=`whoami`
TMUX=tmux

as_user() {
  if [ "$ME" = "$SVC_USER" ] ; then
    echo "Running as me..."
    bash -c "$1"
  else
    echo "Running as su - $SVC_USER"
    su - "$SVC_USER" -c "$1"
  fi
}


#Inputs  : Username, Service name
#Returns : 1 if the service is running, 0 if not
service_is_running()
{
    if pgrep -u "$1" -f "$2" > /dev/null; then
        return 1
    else
        return 0
    fi
}

#Inputs: Number of seconds (approx) to wait
#Returns: 0 if service exited, 1 if timed out waiting
wait_for_service_to_exit()
{
    typeset TIMEOUT=$1
    if [ -z $TIMEOUT ]; then
        TIMEOUT=10
    fi
    
    TIMEOUT=$((TIMEOUT * 10))
    typeset WAITING=1
    while [ $WAITING -eq 1 -a $TIMEOUT -ne 0 ]; do
        service_is_running $SVC_USER $SVC_NAME
        WAITING=$?
        if [ $WAITING -eq 1 ]; then
            sleep 0.1
        fi
        TIMEOUT=$((TIMEOUT - 1))
    done
    
    return $WAITING
}

svc_start() {
    service_is_running $SVC_USER $SVC_NAME
    if [ $? -eq 1 ]; then
        echo "Service [$SVC_NAME] as user [$SVC_USER] is already running"
        return
    else
        echo "Starting [$SVC_NAME] as user [$SVC_USER]"
        as_user "cd $SVC_DIR && $TMUX -S /tmp/$SVC_TMUX new -d \"$SVC_UP_CMD\""
        if [[ ! -z "$SVC_GROUP" ]]; then
            as_user "chgrp $SVC_GROUP /tmp/$SVC_TMUX"
        fi
    fi

    service_is_running $SVC_USER $SVC_NAME
    if [ $? -eq 1 ]; then
        echo "Success: service [$SVC_NAME] running as user [$SVC_USER]"
        echo "Run tmux -S /tmp/$SVC_TMUX attach to interface with the server directly"
    else
        echo "Failed to run [$SVC_NAME] as user [$SVC_USER]"
    fi
}

svc_stop() {
    service_is_running $SVC_USER $SVC_NAME
    if [ $? -eq 1 ]; then
        echo "Stopping $SVC_NAME"
        svc_send_keys "$SVC_STOP_CMD"
    else
        echo "$SVC_NAME was not running."
    fi

    wait_for_service_to_exit 5

    if [ $? -eq 1 ]; then
        echo "Error! $SVC_NAME could not be stopped."
    else
        echo "$SERVICE is stopped."
    fi
}

svc_send_keys() {
    typeset KEYS="$@"
    $TMUX -S /tmp/$SVC_TMUX send-keys -l "$KEYS"
}

validate_env_vars

#Start-Stop here
case "$1" in
    start)
        svc_start
        ;;
    stop)
        svc_stop
        ;;
    restart)
        svc_stop
        svc_start
        ;;
    stat)
        service_is_running $SVC_USER $SVC_NAME
        if [ $? -eq 1 ]; then
            echo "$SVC_NAME is running."
        else
            echo "$SVC_NAME is not running."
        fi
        ;;
    command)
        if [ $# -gt 1 ]; then
            shift
            echo "Sending keys '$@'"
            svc_send_keys "$@" 
        else
            echo "Must specify server command (try 'help'?)"
        fi
        ;;

    *)
        echo "Usage: $0 {start|stop|status|restart|"\
             "command \"server command\"}"
        exit 1
        ;;
esac

exit 0
